{"name": "test_click_appicon[args22]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not find a connected Android device in 20000ms\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Could not find a connected Android device in 20000ms\n    at getResponseForW3CError (D:\\software\\nodejs\\node_global\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\errors.js:1092:9)\n    at asyncHandler (D:\\software\\nodejs\\node_global\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\protocol.js:491:57)", "trace": "self = <scripts.test03_click_appicon.TestCarcenter object at 0x00000213041699F0>\n\n    def setup_method(self):\n>       self.driver = init_driver()\n\nscripts\\test03_click_appicon.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_driver.py:16: in init_driver\n    driver = webdriver.Remote(\"http://127.0.0.1:4723\", caps)\nD:\\software\\Python310\\lib\\site-packages\\appium\\webdriver\\webdriver.py:257: in __init__\n    super().__init__(\nD:\\software\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:205: in __init__\n    self.start_session(capabilities)\nD:\\software\\Python310\\lib\\site-packages\\appium\\webdriver\\webdriver.py:346: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\nD:\\software\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000213044BF4F0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...obal\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\@appium\\\\\\\\base-driver\\\\\\\\lib\\\\\\\\protocol\\\\\\\\protocol.js:491:57)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not find a connected Android device in 20000ms\nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Could not find a connected Android device in 20000ms\nE           at getResponseForW3CError (D:\\software\\nodejs\\node_global\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\errors.js:1092:9)\nE           at asyncHandler (D:\\software\\nodejs\\node_global\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\protocol.js:491:57)\n\nD:\\software\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "parameters": [{"name": "args", "value": "{'xpath': \"//*[contains(@text,'智能助手')]\", 'titleText': '桌面页 - 点击智能助手', 'stepInfo': '正在点击智能助手图标', 'screen': '点击智能助手', 'assertText1': '智能语音', 'assertText2': '智能推荐', 'toastPass': 'Pass,已打开智能助手应用,更新状态断言成功', 'toastFail': 'Fail,没有打开智能助手应用,更新状态断言失败'}"}], "start": 1699843409265, "stop": 1699843409265, "uuid": "3b747b76-6e95-4482-8ac0-92caf682a098", "historyId": "76211e761dfa2c7479f6afff56f985e9", "testCaseId": "7d358dcc0c0f9efda96697f83885171a", "fullName": "scripts.test03_click_appicon.TestCarcenter#test_click_appicon", "labels": [{"name": "severity", "value": "blocker"}, {"name": "feature", "value": "点击桌面上的图标"}, {"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test03_click_appicon"}, {"name": "subSuite", "value": "TestCarcenter"}, {"name": "host", "value": "H-K4E-234022"}, {"name": "thread", "value": "35192-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test03_click_appicon"}]}