{"uid":"edf20c42ba77ed05","name":"test_open_carcenter","fullName":"scripts.test01_carcenter.TestCarcenter#test_open_carcenter","historyId":"6e732a96989136ed4f9473cec8c0b131","time":{"start":1699841947890,"stop":1699841947890,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\n    at UIA2Proxy.command (E:\\DM\\ShirleyPytest\\node_modules\\@appium\\base-driver\\lib\\jsonwp-proxy\\proxy.js:355:13)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at AndroidUiautomator2Driver.commands.getDevicePixelRatio (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\commands\\viewport.js:14:10)\n    at AndroidUiautomator2Driver.fillDeviceDetails (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\driver.js:256:28)\n    at AndroidUiautomator2Driver.createSession (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\driver.js:242:7)\n    at AppiumDriver.createSession (D:\\software\\nodejs\\node_global\\node_modules\\appium\\lib\\appium.js:352:35)","statusTrace":"self = <scripts.test01_carcenter.TestCarcenter object at 0x0000016F19BBB670>\n\n    def setup_method(self):\n>       self.driver = init_driver()\n\nscripts\\test01_carcenter.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_driver.py:16: in init_driver\n    driver = webdriver.Remote(\"http://127.0.0.1:4723\", caps)\nD:\\software\\Python310\\lib\\site-packages\\appium\\webdriver\\webdriver.py:257: in __init__\n    super().__init__(\nD:\\software\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:205: in __init__\n    self.start_session(capabilities)\nD:\\software\\Python310\\lib\\site-packages\\appium\\webdriver\\webdriver.py:346: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\nD:\\software\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016F195D1180>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...river.createSession (D:\\\\\\\\software\\\\\\\\nodejs\\\\\\\\node_global\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\lib\\\\\\\\appium.js:352:35)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nE           at UIA2Proxy.command (E:\\DM\\ShirleyPytest\\node_modules\\@appium\\base-driver\\lib\\jsonwp-proxy\\proxy.js:355:13)\nE           at processTicksAndRejections (node:internal/process/task_queues:95:5)\nE           at AndroidUiautomator2Driver.commands.getDevicePixelRatio (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\commands\\viewport.js:14:10)\nE           at AndroidUiautomator2Driver.fillDeviceDetails (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\driver.js:256:28)\nE           at AndroidUiautomator2Driver.createSession (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\driver.js:242:7)\nE           at AppiumDriver.createSession (D:\\software\\nodejs\\node_global\\node_modules\\appium\\lib\\appium.js:352:35)\n\nD:\\software\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestCarcenter","time":{"start":1699841947890,"stop":1699841954099,"duration":6209},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\n    at UIA2Proxy.command (E:\\DM\\ShirleyPytest\\node_modules\\@appium\\base-driver\\lib\\jsonwp-proxy\\proxy.js:355:13)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at AndroidUiautomator2Driver.commands.getDevicePixelRatio (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\commands\\viewport.js:14:10)\n    at AndroidUiautomator2Driver.fillDeviceDetails (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\driver.js:256:28)\n    at AndroidUiautomator2Driver.createSession (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\driver.js:242:7)\n    at AppiumDriver.createSession (D:\\software\\nodejs\\node_global\\node_modules\\appium\\lib\\appium.js:352:35)\n","statusTrace":"  File \"D:\\software\\Python310\\lib\\site-packages\\pluggy\\_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"D:\\software\\Python310\\lib\\site-packages\\_pytest\\fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"D:\\software\\Python310\\lib\\site-packages\\_pytest\\fixtures.py\", line 895, in call_fixture_func\n    fixture_result = next(generator)\n  File \"D:\\software\\Python310\\lib\\site-packages\\_pytest\\python.py\", line 899, in xunit_setup_method_fixture\n    _call_with_optional_argument(func, method)\n  File \"D:\\software\\Python310\\lib\\site-packages\\_pytest\\python.py\", line 779, in _call_with_optional_argument\n    func()\n  File \"E:\\DM\\ShirleyPytest\\scripts\\test01_carcenter.py\", line 17, in setup_method\n    self.driver = init_driver()\n  File \"E:\\DM\\ShirleyPytest\\base\\base_driver.py\", line 16, in init_driver\n    driver = webdriver.Remote(\"http://127.0.0.1:4723\", caps)\n  File \"D:\\software\\Python310\\lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 257, in __init__\n    super().__init__(\n  File \"D:\\software\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 205, in __init__\n    self.start_session(capabilities)\n  File \"D:\\software\\Python310\\lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 346, in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n  File \"D:\\software\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\software\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\n    at UIA2Proxy.command (E:\\DM\\ShirleyPytest\\node_modules\\@appium\\base-driver\\lib\\jsonwp-proxy\\proxy.js:355:13)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at AndroidUiautomator2Driver.commands.getDevicePixelRatio (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\commands\\viewport.js:14:10)\n    at AndroidUiautomator2Driver.fillDeviceDetails (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\driver.js:256:28)\n    at AndroidUiautomator2Driver.createSession (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\driver.js:242:7)\n    at AppiumDriver.createSession (D:\\software\\nodejs\\node_global\\node_modules\\appium\\lib\\appium.js:352:35)","statusTrace":"self = <scripts.test01_carcenter.TestCarcenter object at 0x0000016F19BBB670>\n\n    def setup_method(self):\n>       self.driver = init_driver()\n\nscripts\\test01_carcenter.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_driver.py:16: in init_driver\n    driver = webdriver.Remote(\"http://127.0.0.1:4723\", caps)\nD:\\software\\Python310\\lib\\site-packages\\appium\\webdriver\\webdriver.py:257: in __init__\n    super().__init__(\nD:\\software\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:205: in __init__\n    self.start_session(capabilities)\nD:\\software\\Python310\\lib\\site-packages\\appium\\webdriver\\webdriver.py:346: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\nD:\\software\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016F195D1180>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...river.createSession (D:\\\\\\\\software\\\\\\\\nodejs\\\\\\\\node_global\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\lib\\\\\\\\appium.js:352:35)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nE           at UIA2Proxy.command (E:\\DM\\ShirleyPytest\\node_modules\\@appium\\base-driver\\lib\\jsonwp-proxy\\proxy.js:355:13)\nE           at processTicksAndRejections (node:internal/process/task_queues:95:5)\nE           at AndroidUiautomator2Driver.commands.getDevicePixelRatio (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\commands\\viewport.js:14:10)\nE           at AndroidUiautomator2Driver.fillDeviceDetails (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\driver.js:256:28)\nE           at AndroidUiautomator2Driver.createSession (E:\\DM\\ShirleyPytest\\node_modules\\appium-uiautomator2-driver\\lib\\driver.js:242:7)\nE           at AppiumDriver.createSession (D:\\software\\nodejs\\node_global\\node_modules\\appium\\lib\\appium.js:352:35)\n\nD:\\software\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException","steps":[],"attachments":[{"uid":"6565ef9bd52744e5","name":"log","source":"6565ef9bd52744e5.txt","type":"text/plain","size":68}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"stepsCount":0},"afterStages":[],"labels":[{"name":"severity","value":"blocker"},{"name":"parentSuite","value":"scripts"},{"name":"suite","value":"test01_carcenter"},{"name":"subSuite","value":"TestCarcenter"},{"name":"host","value":"H-K4E-234022"},{"name":"thread","value":"30596-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"scripts.test01_carcenter"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"edf20c42ba77ed05.json","parameterValues":[]}